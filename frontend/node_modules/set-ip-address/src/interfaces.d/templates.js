'use strict'

var Netmask = require('netmask').Netmask

exports.main = `# This file is auto-generated by system. Do not edit manually!
auto lo
iface lo inet loopback
`

exports.static = `
auto  [INTERFACE]
allow-hotplug  [INTERFACE]
iface  [INTERFACE]  inet  static
  address  [ADDRESS]
  netmask  [NETMASK]
[NAMESERVERS]
[GATEWAY]
[VLAN]
`
exports.dhcp = `
auto  [INTERFACE]
allow-hotplug  [INTERFACE]
iface  [INTERFACE]  inet  dhcp
[VLAN]
`

exports.ppp = `
auto  [PROVIDER]
iface  [PROVIDER]  inet  ppp
pre-up  /bin/ip  link  set  [PHYSICAL_INTERFACE]  up
provider  [PROVIDER]
`

exports.staticFormat = (config) => {
  var is_vlan = typeof config.vlanid == 'number'
  var ifname = is_vlan
    ? config.ifname
    : config.interface

  var block = new Netmask(`${config.ip_address}/${config.prefix}`)

  return exports.static
    .replace(/\[INTERFACE\]/g, ifname)
    .replace(/\[ADDRESS\]/, config.ip_address)
    .replace(/\[NETMASK\]/, block.mask)
    .replace(/\[NAMESERVERS\]\n/, config.nameservers? `  dns-nameservers  ${config.nameservers.join(' ')}\n`: '')
    .replace(/\[GATEWAY\]\n/, config.gateway? `  gateway  ${config.gateway}\n`: '')
    .replace(/\[VLAN\]/, is_vlan? `  vlan-raw-device ${config.interface}` : '')
    .trim()
}

exports.dhcpFormat = (config) => {
  var is_vlan = typeof config.vlanid == 'number'
  var ifname = is_vlan
    ? config.ifname
    : config.interface
  return exports.dhcp
    .replace(/\[INTERFACE\]/g, ifname)
    .replace(/\[VLAN\]/, is_vlan? `  vlan-raw-device ${config.interface}` : '')
    .trim()
}

exports.manualFormat = config => {
  var is_vlan = typeof config.vlanid == 'number'
  var iface = is_vlan
    ? config.ifname
    : config.interface

  var ret = `iface ${iface} inet manual`
  return is_vlan
    ? ret + '\n  vlan-raw-device ' + config.interface
    : ret
}

exports.pppformat = config => {
  return exports.ppp
    .replace(/\[PROVIDER\]/g, config.provider)
    .replace(/\[PHYSICAL_INTERFACE\]/, config.physical_interface)
    .trim()
}

exports.format = (config) => {
  var ret = config.ppp ? exports.pppformat(config)
    : config.dhcp
    ? exports.dhcpFormat(config)
    : config.manual
    ? exports.manualFormat(config)
    : exports.staticFormat(config)

  if (Array.isArray(config.bridge_ports)) {
    config.bridge_opts = config.bridge_opts || {}
    var { stp } = config.bridge_opts
    ret += `\n  bridge_ports ${config.bridge_ports.join(' ')}`
    ret += `\n  bridge_stp ${stp ? 'on' : 'off'}`
  }

  return ret
}

